<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<mvc:resources mapping="/images/**" location="/images/" />

	<beans:bean
		p:order="1"
		class="org.springframework.web.servlet.view.BeanNameViewResolver" />

	<beans:bean
		class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		p:order="2"
		p:viewClass="org.springframework.web.servlet.view.tiles3.TilesView" />
	<!--Don't add suffix or prefix like you do with .jsp files -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
		</beans:property>
	</beans:bean>


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean p:order="2"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan
		base-package="com.company.hellospring" />
	<aop:aspectj-autoproxy />

	<!-- DataSource 설정 -->
	<beans:bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"
			value="jdbc:oracle:thin:@localhost:1521:XE" />
		<beans:property name="username" value="spring" />
		<beans:property name="password" value="spring" />
	</beans:bean>

	<beans:bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<beans:constructor-arg ref="dataSourceSpied" />
		<beans:property name="logFormatter">
			<beans:bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<beans:property name="loggingType" value="MULTI_LINE" />
				<beans:property name="sqlPrefix" value="SQL:::" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<!-- Spring JDBC 설정 -->
	<beans:bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- Mybatis 설정 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:sql-map-config-spring.xml" />
		<beans:property name="mapperLocations"
			value="classpath:mapper/*.xml" />
	</beans:bean>

	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession"></beans:constructor-arg>
	</beans:bean>

	<!-- Transaction 설정 -->
	<beans:bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="allPointcut"
			expression="execution(* com.company..*Impl.*(..))" />
		<aop:advisor pointcut-ref="allPointcut"
			advice-ref="txAdvice" />
	</aop:config>

	<!-- MultipartResolver 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize" value="1000000" />
		<!-- <beans:property name="uploadTempDir" value="C:/Temp" /> -->
	</beans:bean>

	<!-- 예외 처리 -->
	<beans:bean id=""
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key="java.lang.ArithmeticException">
					error/ArithmeticError
				</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultErrorView"
			value="error/error500" />
	</beans:bean>

	<!-- 다국어 처리 -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>classpath:/message/message-common</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="cacheSeconds">
			<beans:value>60</beans:value>
		</beans:property>
	</beans:bean>
	
	<!-- 메일 발송 -->
	<beans:bean id="javaMailSenderImpl"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="host" value="smtp.gmail.com" />
		<beans:property name="username" value="wona23@gmail.com" />
		<beans:property name="password" value="eetyeuqiqkeeubca" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<beans:prop key="mail.smtp.starttls.enable">true</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- Interceptor 등록 -->
	<!-- <beans:bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
		<beans:property name="interceptors">
			<beans:list>
				<beans:ref bean="localeChangeInterceptor" />
			</beans:list>
		</beans:property>
	</beans:bean> -->

	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />
		
	<!-- 쿠키를 이용한 Locale 이용시 <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"/> -->
	<mvc:interceptors>
		<beans:bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<beans:property name="paramName" value="lang" />
		</beans:bean>
	</mvc:interceptors>
	
	<!-- Websocket Handler -->
	<beans:bean id="myHandler" class="com.company.hellospring.websocket.SocketHandler" />
	<websocket:handlers>
		<websocket:mapping path="/springserver.do" handler="myHandler" />
	</websocket:handlers>

	<!-- <beans:bean id="before" class="com.company.hellospring.common.BeforeAdvice" 
		/> <beans:bean id="afterReturning" class="com.company.hellospring.common.AfterReturningAdvice" 
		/> <beans:bean id="afterThrowing" class="com.company.hellospring.common.AfterThrowingAdvice" 
		/> <beans:bean id="after" class="com.company.hellospring.common.AfterAdvice" 
		/> <beans:bean id="around" class="com.company.hellospring.common.AroundAdvice" 
		/> <aop:config> <aop:pointcut expression="execution(* com.company..*Impl.*(..))" 
		id="allPointcut" /> <aop:pointcut expression="execution(* com.company..*Impl.get*(..))" 
		id="getPointcut" /> <aop:aspect ref="before"> <aop:before method="beforeLog" 
		pointcut-ref="allPointcut" /> </aop:aspect> <aop:aspect ref="afterReturning"> 
		<aop:after-returning method="afterLog" pointcut-ref="allPointcut" returning="returnObj" 
		/> </aop:aspect> <aop:aspect ref="afterThrowing"> <aop:after-throwing method="exceptionLog" 
		pointcut-ref="allPointcut" /> </aop:aspect> <aop:aspect ref="after"> <aop:after 
		method="finallyLog" pointcut-ref="allPointcut" /> </aop:aspect> <aop:aspect 
		ref="around"> <aop:around method="aroundLog" pointcut-ref="allPointcut" /> 
		</aop:aspect> </aop:config> -->

</beans:beans>
